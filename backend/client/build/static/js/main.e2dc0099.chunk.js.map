{"version":3,"sources":["components/Buttons/LinkButton.js","containers/Form/components/helpers/FieldInput.js","shared/schemes.js","containers/Form/components/AccountFields.js","containers/Form/components/helpers/ModalMessage.js","containers/Form/components/helpers/Picker.js","containers/Form/components/helpers/FieldDate.js","containers/Form/components/helpers/FieldSelect.js","containers/Form/components/SurveyFields.js","components/ProgressBar/ProgressBar.js","containers/Welcome/Welcome.js","shared/serverUrl.js","containers/Introduction/Introduction.js","containers/Form/Form.js","containers/Dashboard/Dashboard.js","components/HOC/PrivateRoute.js","App.js","serviceWorker.js","utils/interceptors.js","index.js"],"names":["LinkButton","props","Button","variant","btnType","className","disabled","onClick","titleBtn","FieldInput","connect","formik","errors","touched","inputProps","htmlFor","name","labels","type","AccountScheme","Yup","shape","email","required","password","min","confirmPassword","oneOf","SurveyScheme","date","city","gender","AuthScheme","AccountFields","initialValues","validationSchema","onSubmit","fields","handleSubmit","nextStep","isValid","handleReset","dirty","Col","prevStep","ButtonGroup","ModalMessage","errorMessage","show","handleClose","Modal","onHide","animation","Header","closeButton","Title","Body","Footer","Picker","form","setFieldValue","value","setFieldTouched","field","autoOk","id","label","openTo","views","format","placeholder","onChange","String","toLocaleDateString","FieldDate","console","log","component","FieldSelect","as","SurveyFields","utils","DateFnsUtils","error","ProgressBars","ProgressBar","animated","now","progress","Welcome","resetStep","SERVER_URL","withRouter","axios","post","then","res","status","Cookies","set","data","accessToken","expires","Date","expireDate","refreshToken","get","history","push","catch","err","message","setErrorMessage","setShow","response","Form","useState","step","setStep","setData","sendData","latestData","newData","shouldSendData","Row","switchTitle","renderForm","Dashboard","users","setUsers","useEffect","headers","dashboard","to","map","user","key","_id","PrivateRoute","Component","rest","render","App","Container","fluid","exact","path","Boolean","window","location","hostname","match","interceptors","request","use","config","Promise","reject","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2dc0099.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const LinkButton = props => {\r\n  return (\r\n    <>\r\n      <Button\r\n        variant={props.btnType}\r\n        className={props.className}\r\n        disabled={props.disabled}\r\n        onClick={props.onClick}\r\n      >\r\n        {props.titleBtn}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","// Connect libraries\nimport React from \"react\";\nimport { connect, ErrorMessage, Field } from \"formik\";\n\nexport const FieldInput = connect(props => {\n  const { errors, touched } = props.formik;\n  const { ...inputProps } = props;\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label\n          htmlFor={inputProps.name}\n          className={\n            errors[inputProps.name] && touched[inputProps.name]\n              ? \"label-error\"\n              : \"\"\n          }\n        >\n          {errors[inputProps.name] && touched[inputProps.name] ? (\n            <ErrorMessage name={inputProps.name} className=\"invalid-feedback\" />\n          ) : (\n            [inputProps.labels]\n          )}\n        </label>\n        <Field\n          name={inputProps.name}\n          type={inputProps.type}\n          className={\n            \"form-control\" +\n            (errors[inputProps.name] && touched[inputProps.name]\n              ? \"   is-invalid\"\n              : \"\")\n          }\n        />\n      </div>\n    </>\n  );\n});\n","import * as Yup from \"yup\";\r\n\r\n// Yup validation\r\nexport const AccountScheme = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Email is invalid\")\r\n    .required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .min(6, \"Password must be at least 6 characters\")\r\n    .required(\"Password is required\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm Password is required\")\r\n});\r\n\r\nexport const SurveyScheme = Yup.object().shape({\r\n  date: Yup.string().required(\"Date is required\"),\r\n  city: Yup.string().required(\"City is required\"),\r\n  gender: Yup.string().required(\"Gender is required\")\r\n});\r\n\r\n\r\nexport const AuthScheme = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Email is invalid\")\r\n    .required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .min(6, \"Password must be at least 6 characters\")\r\n    .required(\"Password is required\")\r\n});\r\n","// Connect libraries\r\nimport React from \"react\";\r\n// connect Formik\r\nimport { Formik } from \"formik\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { LinkButton } from \"../../../components/Buttons/LinkButton\";\r\nimport { FieldInput } from \"./helpers/FieldInput\";\r\nimport { AccountScheme } from \"../../../shared/schemes\";\r\n// Connect scss files\r\nimport \"./Form.scss\";\r\n\r\n// Component\r\nexport const AccountFields = props => {\r\n  const handleSubmitting = fields => {\r\n    props.handleSubmit(fields, false);\r\n    props.nextStep();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\"\r\n        }}\r\n        validationSchema={AccountScheme}\r\n        onSubmit={handleSubmitting}\r\n      >\r\n        {({ errors, isValid, touched, handleSubmit, handleReset, dirty }) => (\r\n          <Form>\r\n            <Col className=\"inputFiels\">\r\n              {/* ---------------Email -----------------------*/}\r\n              <FieldInput type=\"text\" name=\"email\" labels=\"Email\" />\r\n\r\n              {/* ---------------Password -----------------------*/}\r\n              <FieldInput type=\"password\" name=\"password\" labels=\"Password\" />\r\n\r\n              {/* ---------------Repeat Password -----------------------*/}\r\n              <FieldInput\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                labels=\"Confirm Password\"\r\n              />\r\n            </Col>\r\n\r\n            <Col className=\"formButtons\">\r\n              <Button variant=\"secondary\" onClick={props.prevStep}>\r\n                Previous\r\n              </Button>\r\n              <ButtonGroup>\r\n                <LinkButton\r\n                  btnType=\"danger\"\r\n                  className=\"mx-2\"\r\n                  onClick={handleReset}\r\n                  disabled={!dirty}\r\n                  titleBtn=\"Reset\"\r\n                />\r\n                <LinkButton\r\n                  btnType=\"primary\"\r\n                  onClick={handleSubmit}\r\n                  disabled={!isValid || !dirty}\r\n                  titleBtn=\"Next\"\r\n                />\r\n              </ButtonGroup>\r\n            </Col>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const ModalMessage = ({ errorMessage, show, handleClose }) => {\n  return (\n    <>\n      {errorMessage && (\n        <Modal show={show} onHide={handleClose} animation={true}>\n          <Modal.Header closeButton>\n            <Modal.Title>Error</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{errorMessage}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n// import { DatePicker } from \"@material-ui/pickers\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport const Picker = ({\n  name,\n  form: { setFieldValue, setFieldTouched, ...restForm },\n  field: { value },\n  ...rest\n}) => {\n  return (\n    <KeyboardDatePicker\n      name={name}\n      required\n      autoOk\n      value={value}\n      id=\"date-picker-dialog\"\n      label=\"date-picker\"\n      openTo=\"year\"\n      views={[\"year\", \"month\", \"date\"]}\n      format=\"dd/MM/yyyy\"\n      placeholder=\"10/10/2018\"\n      onChange={value => {\n        // console.log(\"setting value to\", value);\n        if (value === null) {\n          setFieldValue(\"date\", String(value));\n        } else {\n          setFieldValue(\"date\", value.toLocaleDateString());\n        }\n      }}\n      // onError={error => {\n      //   // handle as a side effect\n      //   if (error !== errors[name]) {\n      //     setFieldError(name, error);\n      //   }\n      // }}\n    />\n  );\n};\n// export const Picker = ({ field, form, ...other }) => {\n//   const currentError = form.errors[field.name];\n\n//   return (\n//     <KeyboardDatePicker\n//       clearable\n//       required\n//       autoOk\n//       // disablePast\n//       name={field.name}\n//       value={field.value}\n//       format=\"dd/MM/yyyy\"\n//       helperText={currentError}\n//       error={Boolean(currentError)}\n//       onError={error => {\n//         // handle as a side effect\n//         if (error !== currentError) {\n//           form.setFieldError(field.name, error);\n//         }\n//       }}\n//       // if you are using custom validation schema you probably want to pass `true` as third argument\n//       onChange={date => form.setFieldValue(field.name, date, false)}\n//       {...other}\n//     />\n//   );\n// };\n","// Connect libraries\nimport React from \"react\";\nimport { connect, ErrorMessage, Field } from \"formik\";\nimport { Picker } from \"./Picker\";\n\nexport const FieldDate = connect(props => {\n  const { errors, touched } = props.formik;\n  const { ...inputProps } = props;\n  console.log(errors);\n  return (\n    <>\n      <div className=\"form-group\">\n        <label\n          htmlFor={inputProps.name}\n          className={\n            errors[inputProps.name] && touched[inputProps.name]\n              ? \"label-error\"\n              : \"\"\n          }\n        >\n          {errors[inputProps.name] && touched[inputProps.name] ? (\n            <ErrorMessage name={inputProps.name} className=\"invalid-feedback\" />\n          ) : (\n            [inputProps.labels]\n          )}\n        </label>\n        <Field component={Picker} name=\"date\" />\n      </div>\n    </>\n  );\n});\n","// Connect libraries\nimport React from \"react\";\nimport { connect, ErrorMessage, Field } from \"formik\";\n\nexport const FieldSelect = connect(props => {\n  const { errors, touched } = props.formik;\n  const { ...inputProps } = props;\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label\n          htmlFor={inputProps.name}\n          className={\n            errors[inputProps.name] && touched[inputProps.name]\n              ? \"label-error\"\n              : \"\"\n          }\n        >\n          {errors[inputProps.name] && touched[inputProps.name] ? (\n            <ErrorMessage name={inputProps.name} className=\"invalid-feedback\" />\n          ) : (\n            [inputProps.labels]\n          )}\n        </label>\n        <Field\n          name={inputProps.name}\n          as={inputProps.as}\n          className={\n            \"form-control\" +\n            (errors[inputProps.name] && touched[inputProps.name]\n              ? \"   is-invalid\"\n              : \"\")\n          }\n        >\n          <option value=\"\" disabled>\n            Select a value\n          </option>\n          <option value=\"male\">Male</option>\n          <option value=\"female\">Female</option>\n          <option value=\"other\">Other</option>\n        </Field>\n      </div>\n    </>\n  );\n});\n","// Connect libraries\r\nimport React from \"react\";\r\n// connect Formik\r\nimport { Formik, Form } from \"formik\";\r\n// Connect Bootstrap\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { SurveyScheme } from \"../../../shared/schemes\";\r\nimport { LinkButton } from \"../../../components/Buttons/LinkButton\";\r\nimport { ModalMessage } from \"./helpers/ModalMessage\";\r\nimport { FieldInput } from \"./helpers/FieldInput\";\r\nimport { FieldDate } from \"./helpers/FieldDate\";\r\nimport { FieldSelect } from \"./helpers/FieldSelect\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\n// Connect scss files\r\nimport \"./Form.scss\";\r\n// Component\r\nexport const SurveyFields = props => {\r\n  const handleSubmitting = fields => {\r\n    console.log(fields);\r\n    props.handleSubmit(fields, true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Formik\r\n          initialValues={{\r\n            date: null,\r\n            city: \"\",\r\n            gender: \"\"\r\n          }}\r\n          validationSchema={SurveyScheme}\r\n          onSubmit={handleSubmitting}\r\n        >\r\n          {({ errors, isValid, touched, handleSubmit, handleReset, dirty }) => (\r\n            <Form>\r\n              <Col className=\"inputFiels\">\r\n                {/* ---------------City -----------------------*/}\r\n                <FieldInput type=\"text\" name=\"city\" labels=\"City\" />\r\n\r\n                {/* ---------------DatePicker -----------------------*/}\r\n                <FieldDate name=\"date\" labels=\"Date\" />\r\n\r\n                {/* ---------------Select gender -----------------------*/}\r\n\r\n                <FieldSelect as=\"select\" name=\"gender\" labels=\"Gender\" />\r\n              </Col>\r\n\r\n              <Col className=\"formButtons\">\r\n                <Button variant=\"secondary\" onClick={props.prevStep}>\r\n                  Previous\r\n                </Button>\r\n                <ButtonGroup>\r\n                  <LinkButton\r\n                    btnType=\"danger\"\r\n                    className=\"mx-2\"\r\n                    onClick={handleReset}\r\n                    disabled={!dirty}\r\n                    titleBtn=\"Reset\"\r\n                  />\r\n                  <LinkButton\r\n                    btnType=\"primary\"\r\n                    onClick={handleSubmit}\r\n                    disabled={!isValid || !dirty}\r\n                    titleBtn=\"Next\"\r\n                  />\r\n                </ButtonGroup>\r\n              </Col>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </MuiPickersUtilsProvider>\r\n\r\n      <ModalMessage\r\n        errorMessage={props.error.errorMessage}\r\n        show={props.error.show}\r\n        handleClose={props.error.handleClose}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nexport const ProgressBars = props => {\r\n  return (\r\n    <>\r\n      <div className=\"progressBar\">\r\n        <ProgressBar\r\n          animated\r\n          now={props.progress}\r\n          className=\"wrapper-progress\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { LinkButton } from \"../../components/Buttons/LinkButton\";\r\nimport \"./Welcome.scss\";\r\n\r\nexport const Welcome = ({ resetStep }) => {\r\n  return (\r\n    <>\r\n      <Col className=\"figure\">\r\n        <div className=\"circle\">\r\n          <div className=\"rectangle\"></div>\r\n        </div>\r\n      </Col>\r\n\r\n      <Col className=\"welcome-btn\">\r\n        <LinkButton\r\n          btnType=\"outline-primary\"\r\n          titleBtn=\"Want to Sign In?\"\r\n          onClick={resetStep}\r\n        />\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n","// =----------- CONSTANTS ------------------->\r\nexport const SERVER_URL = \"http://localhost:3002\";","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\n// connect Formik\r\nimport { Formik } from \"formik\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { LinkButton } from \"../../components/Buttons/LinkButton\";\r\nimport { FieldInput } from \"../Form/components/helpers/FieldInput\";\r\nimport { AuthScheme } from \"../../shared/schemes\";\r\nimport \"./Introduction.scss\";\r\n\r\nimport { SERVER_URL } from \"../../shared/serverUrl\";\r\nimport { ModalMessage } from \"../Form/components/helpers/ModalMessage\";\r\n\r\nconst Introduction = props => {\r\n  const handleSubmitting = fields => {\r\n    if (fields) {\r\n      axios\r\n        .post(`${SERVER_URL}/login`, fields)\r\n\r\n        .then(res => {\r\n          console.log(res);\r\n\r\n          if (res.status === 200) {\r\n            Cookies.set(\"AccessToken\", res.data.accessToken, {\r\n              expires: new Date(res.data.expireDate * 1000)\r\n            });\r\n            Cookies.set(\"RefreshToken\", res.data.refreshToken);\r\n            let token = Cookies.get(\"AccessToken\");\r\n            if (!token) {\r\n              console.log(\"Token is null\");\r\n            } else {\r\n              props.history.push(\"dashboard\");\r\n              console.log(\"success\");\r\n            }\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          // console.log(err.response.status);\r\n          if (err.message === \"Network Error\") {\r\n            props.error.setErrorMessage(\r\n              err.message + \": You need to launch backend server\"\r\n            );\r\n            props.error.setShow(true);\r\n          } else if (err.response.status === 400) {\r\n            props.error.setErrorMessage(\r\n              err.message + \": Incorect email or password\"\r\n            );\r\n            props.error.setShow(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\"\r\n        }}\r\n        validationSchema={AuthScheme}\r\n        onSubmit={handleSubmitting}\r\n      >\r\n        {({ errors, isValid, touched, handleSubmit, handleReset, dirty }) => (\r\n          <Form className=\"auth\">\r\n            <Col className=\"inputFiels\">\r\n              {/* ---------------Email -----------------------*/}\r\n              <FieldInput type=\"text\" name=\"email\" labels=\"Email\" />\r\n\r\n              {/* ---------------Password -----------------------*/}\r\n              <FieldInput type=\"password\" name=\"password\" labels=\"Password\" />\r\n            </Col>\r\n            <Col className=\"auth-buttons\">\r\n              <ButtonGroup>\r\n                <LinkButton\r\n                  btnType=\"danger\"\r\n                  className=\"mx-2\"\r\n                  onClick={handleReset}\r\n                  disabled={!dirty}\r\n                  titleBtn=\"Reset\"\r\n                />\r\n                <LinkButton\r\n                  btnType=\"primary\"\r\n                  onClick={handleSubmit}\r\n                  disabled={!isValid || !dirty}\r\n                  titleBtn=\"Sign In\"\r\n                />\r\n              </ButtonGroup>\r\n            </Col>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <Col className=\"intro\">\r\n        <p>Do you want to create account?</p>\r\n        <div className=\"intro-btn\">\r\n          <Button variant=\"outline-primary\" onClick={props.nextStep}>\r\n            Sign Up\r\n          </Button>\r\n        </div>\r\n      </Col>\r\n      <ModalMessage\r\n        errorMessage={props.error.errorMessage}\r\n        show={props.error.show}\r\n        handleClose={props.error.handleClose}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Introduction);\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { AccountFields } from \"./components/AccountFields\";\r\nimport { SurveyFields } from \"./components/SurveyFields\";\r\nimport { ProgressBars } from \"../../components/ProgressBar/ProgressBar\";\r\n\r\nimport { Welcome } from \"../Welcome/Welcome\";\r\nimport Introduction from \"../Introduction/Introduction\";\r\n// Connect server url\r\nimport { SERVER_URL } from \"../../shared/serverUrl\";\r\nconst STEP_TOTAL = 3;\r\n\r\nexport const Form = props => {\r\n  const [step, setStep] = useState(0);\r\n  const [data, setData] = useState({});\r\n  const [errorMessage, setErrorMessage] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  // const handleShow = () => setShow(true);\r\n\r\n  const nextStep = () => {\r\n    setStep(step + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setStep(step - 1);\r\n  };\r\n\r\n  const resetStep = () => {\r\n    setStep(0);\r\n  };\r\n\r\n  const sendData = latestData => {\r\n    setData(latestData);\r\n    // console.log(data);\r\n    if (latestData) {\r\n      // latest.data = latestData.date.to\r\n      axios\r\n        .post(`${SERVER_URL}/register`, latestData)\r\n        .then(res => {\r\n          console.log(res);\r\n          console.log(res.status);\r\n          nextStep();\r\n        })\r\n        .catch(err => {\r\n          console.log(err.message);\r\n          if (err.message === \"Network Error\") {\r\n            setErrorMessage(\r\n              err.message + \": You need to launch backend server\"\r\n            );\r\n            setShow(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (newData, shouldSendData = false) => {\r\n    const latestData = { ...data, ...newData };\r\n    console.log(latestData);\r\n    if (shouldSendData) {\r\n      sendData(latestData);\r\n    } else {\r\n      setData(latestData);\r\n    }\r\n  };\r\n\r\n  const renderForm = () => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Introduction\r\n            nextStep={nextStep}\r\n            error={{\r\n              errorMessage,\r\n              setErrorMessage,\r\n              setShow,\r\n              show,\r\n              handleClose\r\n            }}\r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <AccountFields\r\n            handleSubmit={handleSubmit}\r\n            prevStep={prevStep}\r\n            nextStep={nextStep}\r\n          />\r\n        );\r\n      case 2:\r\n        return (\r\n          <SurveyFields\r\n            handleSubmit={handleSubmit}\r\n            prevStep={prevStep}\r\n            error={{ errorMessage, show, handleClose }}\r\n          />\r\n        );\r\n      case 3:\r\n        return <Welcome resetStep={resetStep} />;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const switchTitle = step => {\r\n    if (step === 0) {\r\n      return <h1 className=\"header-title\">Sign In</h1>;\r\n    }\r\n    return <h1 className=\"header-title\">Sign Up</h1>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <Row className=\"wrapper no-gutters\">\r\n        <Col className=\"header\">\r\n          {switchTitle(step)}\r\n          <ProgressBars progress={(step / STEP_TOTAL) * 100} />\r\n        </Col>\r\n        {renderForm()}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { Link } from \"react-router-dom\";\nimport { LinkButton } from \"../../components/Buttons/LinkButton\";\nimport \"./Dashboard.scss\";\n// Connect server url\nimport { SERVER_URL } from \"../../shared/serverUrl\";\nimport axios from \"axios\";\nexport const Dashboard = props => {\n  const [users, setUsers] = useState([]);\n\n  const getData = () => {\n    axios\n      .get(`${SERVER_URL}/dashboard`, {\n        headers: {\n          \"x-auth\": `${Cookies.get(\"AccessToken\")}`\n        }\n      })\n      .then(dashboard => {\n        console.log(dashboard);\n        const users = dashboard.data;\n        setUsers(users);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return (\n    <>\n      <div className=\"dashboard\">\n        <Link to=\"/\">\n          <LinkButton\n            btnType=\"outline-success\"\n            className=\"dashboard-btn\"\n            titleBtn=\"Begin\"\n          />\n        </Link>\n        <h1 className=\"dashboard-title text-center\">\n          List of registered users\n        </h1>\n\n        <div className=\"container\">\n          <div className=\"dashboard-board row no-gutters\">\n            {users.map(user => (\n              <div key={user._id} className=\"col-12 col-lg board-item\">\n                <div className=\"board-item-section\">\n                  <p className=\"title\">Email: </p>\n                  <p className=\"description\">{user.email}</p>\n                </div>\n                <div className=\"board-item-section\">\n                  <p className=\"title\">City: </p>\n                  <p className=\"description\">{user.city}</p>\n                </div>\n                <div className=\"board-item-section\">\n                  <p className=\"title\">Date of birth: </p>\n                  <p className=\"description\">{user.date}</p>\n                </div>\n                <div className=\"board-item-section\">\n                  <p className=\"title\">Gender: </p>\n                  <p className=\"description\">{user.gender}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n// import { withCookies, useCookies } from \"react-cookie\";\nimport Cookies from \"js-cookie\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n  //   const tokenIsAuth = rest.cookies.get(\"token\");\n  const tokenIsAuth = Cookies.get(\"AccessToken\");\n\n  return tokenIsAuth ? (\n    <Route {...rest} render={props => <Component {...props} />} />\n  ) : (\n    // <Redirect to=\"/\" />\n    <Route {...rest} render={props => <Redirect to=\"/\" />} />\n  );\n};\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Form } from \"./containers/Form/Form\";\r\nimport { Dashboard } from \"./containers/Dashboard/Dashboard\";\r\n\r\nimport { PrivateRoute } from \"./components/HOC/PrivateRoute\";\r\nimport \"./App.scss\";\r\n\r\nconst App = props => {\r\n  return (\r\n    <Container fluid={true} className=\"no-gutters\">\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Form} />\r\n        {/* <Route path=\"/dashboard\" component={Dashboard} /> */}\r\n        <PrivateRoute path=\"/dashboard\" component={Dashboard} />\r\n      </Switch>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { SERVER_URL } from \"../shared/serverUrl\";\n// // Add a request interceptor\naxios.interceptors.request.use(\n  config => {\n    // Do something before request is sent\n    console.log(\"Request\");\n    console.log(config);\n    return config;\n  },\n  error => {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  response => {\n    console.log(\"Response\");\n    console.log(response);\n    const refreshToken = Cookies.get(\"RefreshToken\");\n    const accessToken = Cookies.get(\"AccessToken\");\n    // console.log(refreshToken);\n    // console.log(accessToken);\n    // if (!accessToken) {\n    // if (refreshToken && !accessToken) {\n    if (!accessToken && refreshToken) {\n      axios\n        .post(`${SERVER_URL}/refreshToken`, { refreshToken: refreshToken })\n        .then(res => {\n          console.log(res);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    return response;\n  },\n  // },\n  err => {\n    return Promise.reject(err);\n  }\n);\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { CookiesProvider } from \"react-cookie\";\r\nimport \"react-bootstrap/dist/react-bootstrap\";\r\n// import 'bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./utils/interceptors\";\r\n\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </CookiesProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}